
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: notebook.ipynb

import time
from isolation import Board

# Credits if any
# 1)
# 2)
# 3)

class CustomEvalFn:
    def __init__(self):
        pass

    def score(self, game, my_player=None):
        """Score the current game state.

        Custom evaluation function that acts however you think it should. This
        is not required but highly encouraged if you want to build the best
        AI possible.

        Args:
            game (Board): The board and game state.
            my_player (Player object): This specifies which player you are.

        Returns:
            float: The current state's score, based on your own heuristic.
        """

        # TODO: finish this function!
        moves1 = len(game.get_player_moves(my_player))
        moves2 = len(game.get_opponent_moves(my_player))

        score = moves1 - moves2
        if moves1 == 0:
            score -= 20
        if moves2 == 0:
            score += 20
        return score


class CustomEvalFn2:
    def __init__(self):
        pass

    def score(self, game, my_player=None):
        """Score the current game state.

        Custom evaluation function that acts however you think it should. This
        is not required but highly encouraged if you want to build the best
        AI possible.

        Args:
            game (Board): The board and game state.
            my_player (Player object): This specifies which player you are.

        Returns:
            float: The current state's score, based on your own heuristic.
        """

        # TODO: finish this function!
        if (game.get_active_player() == my_player):
            q21 = len(game.__get_moves__(game.__last_queen_move__[game.__active_players_queen1__]))
            q22 = len(game.__get_moves__(game.__last_queen_move__[game.__active_players_queen2__]))
            q23 = len(game.__get_moves__(game.__last_queen_move__[game.__active_players_queen3__]))
            q11 = len(game.__get_moves__(game.__last_queen_move__[game.__inactive_players_queen1__]))
            q12 = len(game.__get_moves__(game.__last_queen_move__[game.__inactive_players_queen2__]))
            q13 = len(game.__get_moves__(game.__last_queen_move__[game.__inactive_players_queen3__]))
        else:
            q11 = len(game.__get_moves__(game.__last_queen_move__[game.__active_players_queen1__]))
            q12 = len(game.__get_moves__(game.__last_queen_move__[game.__active_players_queen2__]))
            q13 = len(game.__get_moves__(game.__last_queen_move__[game.__active_players_queen3__]))
            q21 = len(game.__get_moves__(game.__last_queen_move__[game.__inactive_players_queen1__]))
            q22 = len(game.__get_moves__(game.__last_queen_move__[game.__inactive_players_queen2__]))
            q23 = len(game.__get_moves__(game.__last_queen_move__[game.__inactive_players_queen3__]))

        moves1 = min(q21, q22, q23)
        moves2 = min(q11, q12, q23)
        score = moves1 - moves2
        if moves1 == 0:
            score -= 20
        if moves2 == 0:
            score += 20
        return score

######################################################################
############ DON'T WRITE ANY CODE OUTSIDE THE CLASS! #################
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############
######################################################################

class OpenMoveEvalFn:
    def score(self, game, my_player=None):
        """Score the current game state
        Evaluation function that outputs a score equal to how many
        moves are open for AI player on the board minus how many moves
        are open for Opponent's player on the board.

        Note:
            If you think of better evaluation function, do it in CustomEvalFn below.

            Args
                game (Board): The board and game state.
                my_player (Player object): This specifies which player you are.

            Returns:
                float: The current state's score. MyMoves-OppMoves.

            """
        moves1 = len(game.get_player_moves(my_player))
        moves2 = len(game.get_opponent_moves(my_player))
        score = moves1 - moves2


        # TODO: finish this function!
        return score


######################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############
######################################################################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

class CustomPlayer:
    # TODO: finish this class!
    """Player that chooses a move using your evaluation function
    and a minimax algorithm with alpha-beta pruning.
    You must finish and test this player to make sure it properly
    uses minimax and alpha-beta to return a good move."""

    def __init__(self, search_depth=3, eval_fn1= CustomEvalFn(), eval_fn2= CustomEvalFn2()):
        """Initializes your player.

        if you find yourself with a superior eval function, update the default
        value of `eval_fn` to `CustomEvalFn()`

        Args:
            search_depth (int): The depth to which your agent will search
            eval_fn (function): Evaluation function used by your agent
        """
        self.eval_fn1 = eval_fn1
        self.eval_fn2 = eval_fn2
        self.search_depth = search_depth

    def move(self, game, time_left):
        """Called to determine one move by your agent

        Note:
            1. Do NOT change the name of this 'move' function. We are going to call
            this function directly.
            2. Call alphabeta instead of minimax once implemented.
        Args:
            game (Board): The board and game state.
            time_left (function): Used to determine time left before timeout

        Returns:
            tuple: ((int,int),(int,int),(int,int)): Your best move
        """

        best_move, utility = alphabeta(self, game, time_left, depth=self.search_depth)
        return best_move

    def utility(self, game, my_turn):
        """You can handle special cases here (e.g. endgame)"""
        return self.eval_fn.score(game, self)


######################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############
######################################################################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def alphabeta(player, game, time_left, depth, alpha=float("-inf"), beta=float("inf"), my_turn=True):
    """Implementation of the alphabeta algorithm.

    Args:
        player (CustomPlayer): This is the instantiation of CustomPlayer()
            that represents your agent. It is used to call anything you need
            from the CustomPlayer class (the utility() method, for example,
            or any class variables that belong to CustomPlayer())
        game (Board): A board and game state.
        time_left (function): Used to determine time left before timeout
        depth: Used to track how deep you are in the search tree
        alpha (float): Alpha value for pruning
        beta (float): Beta value for pruning
        my_turn (bool): True if you are computing scores during your turn.

    Returns:
        (tuple, int): best_move, val
    """
    # TODO: finish this function!
    opponent = game.get_inactive_player()
    player_name = game.__active_player_name__
    opponent_name = game.__inactive_player_name__
    moves = game.get_player_moves(player)

    if time_left() > 100000000:
        depth = 3
        print('moves',len(moves),'depth',depth)
    elif len(moves) > 20:
        depth = 4
        print('moves', len(moves), 'depth', depth)
    elif len(moves) > 15:
        depth = 5
        print('moves', len(moves), 'depth', depth)
    else:
        depth = 7
        print('moves', len(moves), 'depth', depth)
    best_score = - 10000
    alpha = -100000
    count = 0
    if depth == 3:
        for move in moves:
            new_board, is_over, winner = game.forecast_move(move)  # player moves
            if winner == player_name:
                return move, 0
            elif winner == opponent_name:
                continue
            moves2 = new_board.get_player_moves(opponent)
            best_score2 = 10000
            beta2 = 100000
            for move2 in moves2:
                new_board2, is_over, winner = new_board.forecast_move(move2)  # opponent moves
                if winner == player_name:
                    best_score2 = 120
                    beta2 = best_score2
                    break  # opponent will not select this move.
                elif winner == opponent_name:
                    best_score2 = -120  # opponent will pick this one as he wins.
                    beta2 = best_score2
                    break
                else:
                    moves3 = new_board2.get_player_moves(player)  # player makes moves for the third round.
                    best_score3 = -10000
                    alpha3 = -100000
                    for move3 in moves3:
                        new_board3, is_over, winner = new_board2.forecast_move(move3)  # player moves
                        if winner == player_name:
                            best_score3 = 110
                            alpha3 = best_score3
                            break
                        elif winner == opponent_name:
                            best_score3 = -110
                            alpha3 = best_score3
                            break
                        else:
                            scorer = player.eval_fn2
                            score = scorer.score(new_board3, player)
                        if score > best_score3:
                            best_score3 = score
                            alpha3 = best_score3
                            count += 1
                        if alpha3 >= beta2:
                            break
                if best_score3 < best_score2:
                    best_score2 = best_score3
                    beta2 = best_score2
                if alpha >= beta2:
                    break
            if best_score2 > best_score:
                best_score = best_score2
                alpha = best_score
                best_move = move
    elif depth == 4:
        for move in moves:
            new_board, is_over, winner = game.forecast_move(move)  # player moves
            if winner == player_name:
                return move, 0
            elif winner == opponent_name:
                continue
            moves2 = new_board.get_player_moves(opponent)
            best_score2 = 10000
            beta2 = 100000
            for move2 in moves2:
                new_board2, is_over, winner = new_board.forecast_move(move2)  # opponent moves
                if winner == player_name:
                    best_score2 = 120
                    beta2 = best_score2
                    break  # opponent will not select this move.
                elif winner == opponent_name:
                    best_score2 = -120  # opponent will pick this one as he wins.
                    beta2 = best_score2
                    break
                else:
                    moves3 = new_board2.get_player_moves(player)  # player makes moves for the third round.
                    best_score3 = -10000
                    alpha3 = -100000
                    for move3 in moves3:
                        new_board3, is_over, winner = new_board2.forecast_move(move3)  # player moves
                        if winner == player_name:
                            best_score3 = 110
                            alpha3 = best_score3
                            break
                        elif winner == opponent_name:
                            best_score3 = -110
                            alpha3 = best_score3
                            break
                        moves4 = new_board3.get_player_moves(opponent)  # opponent makes moves for the 4th round
                        best_score4 = 10000
                        # alpha4 = -100000
                        beta4 = 100000
                        for move4 in moves4:
                            new_board4, is_over, winner = new_board3.forecast_move(move4)  # opponent moves
                            if winner == player_name:
                                best_score4 = 100
                                beta4 = best_score4
                                break
                            elif winner == opponent_name:
                                best_score4 = -100
                                beta4 = best_score4
                                break
                            else:
                                scorer = player.eval_fn2
                                score = scorer.score(new_board4, player)
                            if score < best_score4:
                                best_score4 = score
                                beta4 = best_score4
                                count += 1
                            if max(alpha,alpha3) >= beta4:
                                break
                        if best_score4 > best_score3:
                            best_score3 = best_score4
                            alpha3 = best_score3
                        if alpha3 >= beta2:
                            break
                if best_score3 < best_score2:
                    best_score2 = best_score3
                    beta2 = best_score2
                if alpha >= beta2:
                    break
            if best_score2 > best_score:
                best_score = best_score2
                alpha = best_score
                best_move = move
    elif depth == 5:
        for move in moves:
            new_board, is_over, winner = game.forecast_move(move)  # player moves
            if winner == player_name:
                return move, 0
            elif winner == opponent_name:
                continue
            moves2 = new_board.get_player_moves(opponent)
            best_score2 = 10000
            beta2 = 100000
            for move2 in moves2:
                new_board2, is_over, winner = new_board.forecast_move(move2)  # opponent moves
                if winner == player_name:
                    best_score2 = 120
                    beta2 = best_score2
                    break  # opponent will not select this move.
                elif winner == opponent_name:
                    best_score2 = -120  # opponent will pick this one as he wins.
                    beta2 = best_score2
                    break
                else:
                    moves3 = new_board2.get_player_moves(player)  # player makes moves for the third round.
                    best_score3 = -10000
                    alpha3 = -100000
                    for move3 in moves3:
                        new_board3, is_over, winner = new_board2.forecast_move(move3)  # player moves
                        if winner == player_name:
                            best_score3 = 110
                            alpha3 = best_score3
                            break
                        elif winner == opponent_name:
                            best_score3 = -110
                            alpha3 = best_score3
                            break
                        moves4 = new_board3.get_player_moves(opponent)  # opponent makes moves for the 4th round
                        best_score4 = 10000
                        # alpha4 = -100000
                        beta4 = 100000
                        for move4 in moves4:
                            new_board4, is_over, winner = new_board3.forecast_move(move4)  # opponent moves
                            if winner == player_name:
                                best_score4 = 100
                                beta4 = best_score4
                                break
                            elif winner == opponent_name:
                                best_score4 = -100
                                beta4 = best_score4
                                break
                            moves5 = new_board4.get_player_moves(player)  # player makes moves for the 5th round
                            best_score5 = -10000
                            alpha5 = -100000
                            for move5 in moves5:
                                new_board5, is_over, winner = new_board4.forecast_move(move5)  # player moves
                                if winner == player_name:
                                    best_score5 = 90
                                    alpha5 = best_score5
                                    break
                                elif winner == opponent_name:
                                    best_score5 = -90
                                    alpha5 = best_score5
                                    break
                                else:
                                    scorer = player.eval_fn2
                                    score = scorer.score(new_board5, player)
                                if score > best_score5:
                                    best_score5 = score
                                    alpha5 = best_score5
                                    count += 1
                                if alpha5 >= min(beta2,beta4):
                                    break
                            if best_score5 < best_score4:
                                best_score4 = best_score5
                                beta4 = best_score4
                            if max(alpha,alpha3) >= beta4:
                                break
                        if best_score4 > best_score3:
                            best_score3 = best_score4
                            alpha3 = best_score3
                        if alpha3 >= beta2:
                            break
                if best_score3 < best_score2:
                    best_score2 = best_score3
                    beta2 = best_score2
                if alpha >= beta2:
                    break
            if best_score2 > best_score:
                best_score = best_score2
                alpha = best_score
                best_move = move
    elif depth == 6:
        for move in moves:
            new_board, is_over, winner = game.forecast_move(move)  # player moves
            if winner == player_name:
                return move, 0
            elif winner == opponent_name:
                continue
            moves2 = new_board.get_player_moves(opponent)
            best_score2 = 10000
            beta2 = 100000
            for move2 in moves2:
                new_board2, is_over, winner = new_board.forecast_move(move2)  # opponent moves
                if winner == player_name:
                    best_score2 = 120
                    beta2 = best_score2
                    break  # opponent will not select this move.
                elif winner == opponent_name:
                    best_score2 = -120  # opponent will pick this one as he wins.
                    beta2 = best_score2
                    break
                else:
                    moves3 = new_board2.get_player_moves(player)  # player makes moves for the third round.
                    best_score3 = -10000
                    alpha3 = -100000
                    for move3 in moves3:
                        new_board3, is_over, winner = new_board2.forecast_move(move3)  # player moves
                        if winner == player_name:
                            best_score3 = 110
                            alpha3 = best_score3
                            break
                        elif winner == opponent_name:
                            best_score3 = -110
                            alpha3 = best_score3
                            break
                        moves4 = new_board3.get_player_moves(opponent)  # opponent makes moves for the 4th round
                        best_score4 = 10000
                        # alpha4 = -100000
                        beta4 = 100000
                        for move4 in moves4:
                            new_board4, is_over, winner = new_board3.forecast_move(move4)  # opponent moves
                            if winner == player_name:
                                best_score4 = 100
                                beta4 = best_score4
                                break
                            elif winner == opponent_name:
                                best_score4 = -100
                                beta4 = best_score4
                                break
                            moves5 = new_board4.get_player_moves(player)  # player makes moves for the 5th round
                            best_score5 = -10000
                            alpha5 = -100000
                            for move5 in moves5:
                                new_board5, is_over, winner = new_board4.forecast_move(move5)  # player moves
                                if winner == player_name:
                                    best_score5 = 90
                                    alpha5 = best_score5
                                    break
                                elif winner == opponent_name:
                                    best_score5 = -90
                                    alpha5 = best_score5
                                    break
                                moves6 = new_board5.get_player_moves(opponent)  # opponent makes moves for the 6th round
                                best_score6 = 10000
                                beta6 = 100000
                                for move6 in moves6:
                                    new_board6, is_over, winner = new_board5.forecast_move(move6)  # opponent moves
                                    if winner == player_name:
                                        best_score6 = 80
                                        beta6 = best_score6
                                        break
                                    elif winner == opponent_name:
                                        best_score6 = -80
                                        beta6 = best_score6
                                        break
                                    else:
                                        scorer = player.eval_fn2
                                        score = scorer.score(new_board6, player)
                                    if score < best_score6:
                                        best_score6 = score
                                        beta6 = best_score6
                                        count += 1
                                    if alpha5 >= beta6:
                                        break
                                if best_score6 > best_score5:
                                    best_score5 = best_score6
                                    alpha5 = best_score5
                                if alpha5 >= beta4:
                                    break
                            if best_score5 < best_score4:
                                best_score4 = best_score5
                                beta4 = best_score4
                            if alpha3 >= beta4:
                                break
                        if best_score4 > best_score3:
                            best_score3 = best_score4
                            alpha3 = best_score3
                        if alpha3 >= beta2:
                            break
                if best_score3 < best_score2:
                    best_score2 = best_score3
                    beta2 = best_score2
                if alpha >= beta2:
                    break
            if best_score2 > best_score:
                best_score = best_score2
                alpha = best_score
                best_move = move
    elif depth == 7:
        for move in moves:
            new_board, is_over, winner = game.forecast_move(move)  # player moves
            if winner == player_name:
                return move, 0
            elif winner == opponent_name:
                continue
            moves2 = new_board.get_player_moves(opponent)
            best_score2 = 10000
            beta2 = 100000
            for move2 in moves2:
                new_board2, is_over, winner = new_board.forecast_move(move2)  # opponent moves
                if winner == player_name:
                    best_score2 = 120
                    beta2 = best_score2
                    break  # opponent will not select this move.
                elif winner == opponent_name:
                    best_score2 = -120  # opponent will pick this one as he wins.
                    beta2 = best_score2
                    break
                else:
                    moves3 = new_board2.get_player_moves(player)  # player makes moves for the third round.
                    best_score3 = -10000
                    alpha3 = -100000
                    for move3 in moves3:
                        new_board3, is_over, winner = new_board2.forecast_move(move3)  # player moves
                        if winner == player_name:
                            best_score3 = 110
                            alpha3 = best_score3
                            # transposition
                            break
                        elif winner == opponent_name:
                            best_score3 = -110
                            alpha3 = best_score3
                            break
                        moves4 = new_board3.get_player_moves(opponent)  # opponent makes moves for the 4th round
                        best_score4 = 10000
                        # alpha4 = -100000
                        beta4 = 100000
                        for move4 in moves4:
                            new_board4, is_over, winner = new_board3.forecast_move(move4)  # opponent moves
                            if winner == player_name:
                                best_score4 = 100
                                beta4 = best_score4
                                break
                            elif winner == opponent_name:
                                best_score4 = -100
                                beta4 = best_score4
                                break
                            moves5 = new_board4.get_player_moves(player)  # player makes moves for the 5th round
                            best_score5 = -10000
                            alpha5 = -100000
                            for move5 in moves5:
                                new_board5, is_over, winner = new_board4.forecast_move(move5)  # player moves
                                if winner == player_name:
                                    best_score5 = 90
                                    alpha5 = best_score5
                                    break
                                elif winner == opponent_name:
                                    best_score5 = -90
                                    alpha5 = best_score5
                                    break
                                moves6 = new_board5.get_player_moves(opponent)  # opponent makes moves for the 6th round
                                best_score6 = 10000
                                beta6 = 100000
                                for move6 in moves6:
                                    new_board6, is_over, winner = new_board5.forecast_move(move6)  # opponent moves
                                    if winner == player_name:
                                        best_score6 = 80
                                        beta6 = best_score6
                                        break
                                    elif winner == opponent_name:
                                        best_score6 = -80
                                        beta6 = best_score6
                                        break
                                    moves7 = new_board6.get_player_moves(player)  # 7th round - odds are player
                                    best_score7 = -10000
                                    alpha7 = -100000
                                    for move7 in moves7:
                                        new_board7, is_over, winner = new_board6.forecast_move(move7)  # player moves
                                        if winner == player_name:
                                            best_score7 = 70
                                            alpha7 = best_score7
                                            break
                                        elif winner == opponent_name:
                                            best_score7 = -70
                                            alpha7 = best_score7
                                            break
                                        moves8 = new_board7.get_player_moves(opponent)  # 8th round - evens are opponent
                                        best_score8 = 10000
                                        beta8 = 100000
                                        for move8 in moves8:
                                            new_board8, is_over, winner = new_board7.forecast_move(
                                                    move8)  # player moves
                                            if winner == player_name:
                                                best_score8 = 60
                                                beta8 = best_score8
                                                break
                                            elif winner == opponent_name:
                                                best_score8 = -60
                                                beta8 = best_score8
                                                break
                                            moves9 = new_board8.get_player_moves(
                                                player)  # 9th round - odds are player
                                            best_score9 = -10000
                                            alpha9 = -100000
                                            for move9 in moves9:
                                                count += 1
                                                new_board9, is_over, winner = new_board8.forecast_move(
                                                    move9)  # player moves
                                                if winner == player_name:
                                                    best_score9 = 50
                                                    alpha9 = best_score9
                                                    break
                                                elif winner == opponent_name:
                                                    best_score9 = -50
                                                    alpha9 = best_score9
                                                    break
                                                else:
                                                    scorer = player.eval_fn2
                                                    score = scorer.score(new_board9, player)
                                                if score > best_score9:
                                                    best_score9 = score
                                                    alpha = best_score9
                                                if alpha9 >= min(beta2,beta4,beta6,beta8):
                                                    break
                                            if best_score9 < best_score8:
                                                best_score8 = best_score9
                                                beta8 = best_score8
                                            if max(alpha,alpha3,alpha5,alpha7) >= beta8:
                                                break
                                        if best_score8 > best_score7:
                                            best_score7 = best_score8
                                            alpha7 = best_score7
                                        if alpha7 >= min(beta2,beta4,beta6):
                                            break
                                    if best_score7 < best_score6:
                                        best_score6 = best_score7
                                        beta6 = best_score6
                                    if max(alpha,alpha3,alpha5) >= beta6:
                                        break
                                if best_score6 > best_score5:
                                    best_score5 = best_score6
                                    alpha5 = best_score5
                                if alpha5 >= min(beta2,beta4):
                                    break
                            if best_score5 < best_score4:
                                best_score4 = best_score5
                                beta4 = best_score4
                            if max(alpha,alpha3) >= beta4:
                                break
                        if best_score4 > best_score3:
                            best_score3 = best_score4
                            alpha3 = best_score3
                        if alpha3 >= beta2:
                            break
                if best_score3 < best_score2:
                    best_score2 = best_score3
                    beta2 = best_score2
                if alpha >= beta2:
                    break
            if best_score2 > best_score:
                best_score = best_score2
                alpha = best_score
                best_move = move



    return best_move, best_score