
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: solution.ipynb

import numpy as np
from helper_functions import *

def get_initial_means(array, k):
    """
    Picks k random points from the 2D array
    (without replacement) to use as initial
    cluster means

    params:
    array = numpy.ndarray[numpy.ndarray[float]] - m x n | datapoints x features

    k = int

    returns:
    initial_means = numpy.ndarray[numpy.ndarray[float]]
    """
    # TODO: finish this function
    ndata = len(array)
    lst = list(range(ndata))
    ind = np.random.choice(lst,k,replace=False)
    selection = array[ind,:]
    return selection

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def k_means_step(X, k, means):
    """
    A single update/step of the K-means algorithm
    Based on a input X and current mean estimate,
    predict clusters for each of the pixels and
    calculate new means.
    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n | pixels x features (already flattened)
    k = int
    means = numpy.ndarray[numpy.ndarray[float]] - k x n

    returns:
    (new_means, clusters)
    new_means = numpy.ndarray[numpy.ndarray[float]] - k x n
    clusters = numpy.ndarray[int] - m sized vector
    """
    # TODO: finish this function
    size = X.shape[0]
    nfeat = X.shape[1]
    dist = np.ndarray((size, 0))
    for i, mean in enumerate(means):
        tmp = np.linalg.norm(X - mean, axis=1).reshape(size, 1)
        dist = np.append(dist, tmp, axis=1)
    clusters = np.argmin(dist, axis=1)
    new_means = np.ndarray((0, nfeat))
    for i in range(k):
        tmp = X[clusters[:] == i, :]
        mn = np.mean(tmp, axis=0).reshape((1, nfeat))
        new_means = np.append(new_means, mn, axis=0)
    return new_means, clusters

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def k_means_segment(image_values, k=3, initial_means=None):
    """
    Separate the provided RGB values into
    k separate clusters using the k-means algorithm,
    then return an updated version of the image
    with the original values replaced with
    the corresponding cluster values.

    params:
    image_values = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - r x c x ch
    k = int
    initial_means = numpy.ndarray[numpy.ndarray[float]] or None

    returns:
    updated_image_values = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - r x c x ch
    """
    # TODO: finish this function
    rdim = image_values.shape[0]
    cdim = image_values.shape[1]
    chdim = image_values.shape[2]
    imagecp = np.copy(image_values)
    image2d = np.reshape(imagecp, (rdim * cdim, chdim))
    if initial_means is None:
        initial_means = get_initial_means(image2d, k)
    for i in range(100):
        means = initial_means
        means, clusters = k_means_step(image2d, k, means)
        dist = np.linalg.norm(means - initial_means)
        if dist < 0.0000001:
            break
        initial_means = means

    image2d[:, :] = 0
    for i in range(k):
        image2d[clusters == i] = means[i]
    image3d = np.reshape(image2d, (rdim, cdim, chdim))
    return image3d

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def initialize_parameters(X, k):
    """
    Return initial values for training of the GMM
    Set component mean to a random
    pixel's value (without replacement),
    based on the mean calculate covariance matrices,
    and set each component mixing coefficient (PIs)
    to a uniform values
    (e.g. 4 components -> [0.25,0.25,0.25,0.25]).

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int

    returns:
    (MU, SIGMA, PI)
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    """
    # TODO: finish this function
    m = X.shape[0]
    n = X.shape[1]
    ind = np.random.choice(list(range(m)), k, replace=False)
    mu = X[ind, :]

    sigma = np.zeros((k,n,n))
    for i in range(k):
        sigma[i, :, :] = np.matmul(np.transpose(X-mu[i]),X-mu[i])
    sigma /= m
    pi = np.ones((k,1))/k
    return mu, sigma, pi

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def prob(x, mu, sigma):
    """Calculate the probability of x (a single
    data point or an array of data points) under the
    component with the given mean and covariance.
    The function is intended to compute multivariate
    normal distribution, which is given by N(x;MU,SIGMA).

    params:
    x = numpy.ndarray[float] or numpy.ndarray[numpy.ndarray[float]]
    mu = numpy.ndarray[float]
    sigma = numpy.ndarray[numpy.ndarray[float]]

    returns:
    probability = float or numpy.ndarray[float]
    """
    # TODO: finish this function
    if x.ndim == 1:
        determinant = np.linalg.det(sigma)
        const = 1. / ((2 * np.pi) ** mu.shape[0] * determinant) ** 0.5
        z = x - mu
        dum1 = np.matmul(np.transpose(z), np.matmul(np.linalg.inv(sigma), z))
        dum2 = np.exp(-1 / 2 * dum1)
        pdf = const * dum2
    else:
        determinant = np.linalg.det(sigma)
        const = 1. / ((2 * np.pi) ** mu.shape[0] * determinant) ** 0.5
        z = x - mu
        dum1 = np.einsum('ij,ji->i',z,np.matmul(np.linalg.inv(sigma), np.transpose(z)))
        # dum1 = np.matmul(z, np.matmul(np.linalg.inv(sigma), np.transpose(z)))
        # dum1 = np.diag(dum1)
        dum2 = np.exp(-1 / 2 * dum1)
        pdf = const * dum2

    return pdf

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def E_step(X,MU,SIGMA,PI,k):
    """
    E-step - Expectation
    Calculate responsibility for each
    of the data points, for the given
    MU, SIGMA and PI.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    k = int

    returns:
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """
    # TODO: finish this function
    k = MU.shape[0]
    m = X.shape[0]
    pdf = np.zeros((k,m))
    for i in range(MU.shape[0]):
        pdf[i,:] = prob(X, MU[i], SIGMA[i]) * PI[i]

    responsability = pdf / np.sum(pdf, axis=0)
    return responsability

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def M_step(X, r, k):
    """
    M-step - Maximization
    Calculate new MU, SIGMA and PI matrices
    based on the given responsibilities.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    r = numpy.ndarray[numpy.ndarray[float]] - k x m
    k = int

    returns:
    (new_MU, new_SIGMA, new_PI)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k x 1
    """
    # TODO: finish this function
    k = r.shape[0]
    n = X.shape[1]
    mk = np.sum(r, axis=1)
    summk = np.sum(mk)
    new_PI = mk / summk
    new_MU = np.einsum('km,mn->kn', r, X)
    new_MU /= mk[:,np.newaxis]
    new_SIGMA = np.zeros((k,n,n))
    for i in range(k):
        z = X - new_MU[i]
        ri = r[i]
        zm  = z * r[i][:,np.newaxis]
        new_SIGMA[i,:,:] = np.matmul(np.transpose(zm),z) / mk[i]
    return new_MU, new_SIGMA, new_PI

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def likelihood(X, PI, MU, SIGMA, k):
    """Calculate a log likelihood of the
    trained model based on the following
    formula for posterior probability:

    log(Pr(X | mixing, mean, stdev)) = sum((n=1 to N), log(sum((k=1 to K),
                                      mixing_k * N(x_n | mean_k,stdev_k))))

    Make sure you are using natural log, instead of log base 2 or base 10.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    k = int

    returns:
    log_likelihood = float
    """
    # TODO: finish this function

    k = MU.shape[0]
    m = X.shape[0]
    pdfsum = np.zeros((m))
    for i in range(k):
        sigma = SIGMA[i]
        mu = MU[i]
        pi = PI[i]
        pdfsum += pi * prob(X, mu, sigma)
    pdfsum = np.log(pdfsum)
    pdfsum = np.sum(pdfsum)
    return pdfsum

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def train_model(X, k, convergence_function, initial_values = None):
    """
    Train the mixture model using the
    expectation-maximization algorithm.
    E.g., iterate E and M steps from
    above until convergence.
    If the initial_values are None, initialize them.
    Else it's a tuple of the format (MU, SIGMA, PI).
    Convergence is reached when convergence_function
    returns terminate as True,
    see default convergence_function example
    in `helper_functions.py`

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    convergence_function = func
    initial_values = None or (MU, SIGMA, PI)

    returns:
    (new_MU, new_SIGMA, new_PI, responsibility)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k x 1
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """
    # TODO: finish this function
    if initial_values is None:
        MU, SIGMA, PI = initialize_parameters(X, k)
    else:
        (MU, SIGMA, PI) = initial_values
    pold = -100000

    counter = 0
    converged = False
    while not converged:
        counter += 1
        r = E_step(X, MU, SIGMA, PI, k)
        MU, SIGMA, PI = M_step(X, r, k)
        pnew = likelihood(X, PI, MU, SIGMA, k)
        ctr, converged = convergence_function(pold,pnew,counter)
        pold = pnew
    return MU, SIGMA, PI, r

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def cluster(r):
    """
    Based on a given responsibilities matrix
    return an array of cluster indices.
    Assign each datapoint to a cluster based,
    on component with a max-likelihood
    (maximum responsibility value).

    params:
    r = numpy.ndarray[numpy.ndarray[float]] - k x m - responsibility matrix

    return:
    clusters = numpy.ndarray[int] - m x 1
    """
    # TODO: finish this
    return np.argmax(r,axis=0)

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def segment(X, MU, k, r):
    """
    Segment the X matrix into k components.
    Returns a matrix where each data point is
    replaced with its max-likelihood component mean.
    E.g., return the original matrix where each pixel's
    intensity replaced with its max-likelihood
    component mean. (the shape is still mxn, not
    original image size)

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    k = int
    r = numpy.ndarray[numpy.ndarray[float]] - k x m - responsibility matrix

    returns:
    new_X = numpy.ndarray[numpy.ndarray[float]] - m x n
    """
    # TODO: finish this function
    clusters = cluster(r)
    new_X = MU[clusters]
    return new_X

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def best_segment(X,k,iters):
    """Determine the best segmentation
    of the image by repeatedly
    training the model and
    calculating its likelihood.
    Return the segment with the
    highest likelihood.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    iters = int

    returns:
    (likelihood, segment)
    likelihood = float
    segment = numpy.ndarray[numpy.ndarray[float]]
    """
    # TODO: finish this function
    likely = -10000000
    for iter in range(iters):
        MU, SIGMA, PI, r = train_model(X, k, convergence_function=default_convergence, initial_values=None)
        p = likelihood(X, PI, MU, SIGMA, k)
        if p > likely:
            likely = p
            clusters = cluster(r)
            new_X = MU[clusters]

    return (likely, new_X)

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def improved_initialization(X,k):
    """
    Initialize the training
    process by setting each
    component mean using some algorithm that
    you think might give better means to start with,
    based on the mean calculate covariance matrices,
    and set each component mixing coefficient (PIs)
    to a uniform values
    (e.g. 4 components -> [0.25,0.25,0.25,0.25]).

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int

    returns:
    (MU, SIGMA, PI)
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    """
    # TODO: finish this function

    MU, SIGMA, PI = initialize_parameters(X, k)

    pold = -100000

    counter = 0
    converged = False
    while not converged:
        counter += 1
        r = E_step(X, MU, SIGMA, PI, k)
        MU, SIGMA, PI = M_step(X, r, k)
        pnew = likelihood(X, PI, MU, SIGMA, k)
        ctr, converged = default_convergence(pold,pnew,counter)
        pold = pnew
    return MU, SIGMA, PI

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def new_convergence_function(previous_variables, new_variables, conv_ctr,
                             conv_ctr_cap=10):
    """
    Convergence function
    based on parameters:
    when all variables vary by
    less than 10% from the previous
    iteration's variables, increase
    the convergence counter.

    params:
    previous_variables = [numpy.ndarray[float]]
                         containing [means, variances, mixing_coefficients]
    new_variables = [numpy.ndarray[float]]
                    containing [means, variances, mixing_coefficients]
    conv_ctr = int
    conv_ctr_cap = int

    return:
    (conv_crt, converged)
    conv_ctr = int
    converged = boolean
    """
    # TODO: finish this function
    if conv_ctr < 3:
        return False

    for i in range(len(new_variables)):
        max_cand = np.max(new_variables[i]/previous_variables[i])
        min_cand = np.min(new_variables[i]/previous_variables[i])
        if max_cand > 1.01:
            return False
        if min_cand < 0.99:
            return False

    return True

def train_model_improved(X, k, convergence_function, initial_values = None):
    """
    Train the mixture model using the
    expectation-maximization algorithm.
    E.g., iterate E and M steps from
    above until convergence.
    If the initial_values are None, initialize them.
    Else it's a tuple of the format (MU, SIGMA, PI).
    Convergence is reached when convergence_function
    returns terminate as True. Use new_convergence_fuction
    implemented above.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    convergence_function = func
    initial_values = None or (MU, SIGMA, PI)

    returns:
    (new_MU, new_SIGMA, new_PI, responsibility)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k x 1
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """
    # TODO: finish this function
    if initial_values is None:
        MU, SIGMA, PI = improved_initialization(X,k)
    else:
        (MU, SIGMA, PI) = initial_values
    old = -100000

    counter = 0
    converged = False
    while not converged:
        counter += 1
        r = E_step(X, MU, SIGMA, PI, k)
        new = M_step(X, r, k)
        MU, SIGMA, PI = new
        # pnew = likelihood(X, PI, MU, SIGMA, k)
        converged = convergence_function(old, new, counter)
        old = new
    return MU, SIGMA, PI, r

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
# Unittest below will check both of the functions at the same time.
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def bayes_info_criterion(X, PI, MU, SIGMA, k):
    """
    See description above
    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    k = int

    return:
    bayes_info_criterion = int
    """
    # TODO: finish this function
    n = MU.shape[1]
    m = X.shape[0]
    param = n*k + (k * n * (n + 1) / 2) + k - 1
    L = likelihood(X, PI, MU, SIGMA, k)
    BIC = param * np.log(m) - 2. * L
    BIC = int(BIC)
    return BIC

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def BIC_likelihood_model_test(image_matrix, comp_means):
    """Returns the number of components
    corresponding to the minimum BIC
    and maximum likelihood with respect
    to image_matrix and comp_means.

    params:
    image_matrix = numpy.ndarray[numpy.ndarray[float]] - m x n
    comp_means = list(numpy.ndarray[numpy.ndarray[float]]) - list(k x n) (means for each value of k)

    returns:
    (n_comp_min_bic, n_comp_max_likelihood)
    n_comp_min_bic = int
    n_comp_max_likelihood = int
    """
    # TODO: finish this method
    BIC_min = 1000000
    Lmax = -1000000
    X = np.copy(image_matrix)
    for means in comp_means:
        k = means.shape[0]
        MU, SIGMA, PI, r = train_model(X, k, convergence_function = default_convergence)
        BIC = bayes_info_criterion(X, PI, MU, SIGMA, k)
        L = likelihood(X, PI, MU, SIGMA, k)
        if BIC < BIC_min:
            n_comp_min_bic = k
            BIC_min = BIC
        if L > Lmax:
            n_comp_max_likelihood = k
            Lmax = L
    return n_comp_min_bic, n_comp_max_likelihood

def return_your_name():
    # return your name
    # TODO: finish this
    return "sgorucu3"